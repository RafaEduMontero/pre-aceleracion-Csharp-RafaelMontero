// <auto-generated />
using System;
using ChallengeAlkemyDisney.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChallengeAlkemyDisney.Migrations
{
    [DbContext(typeof(DisneyContext))]
    partial class DisneyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CelebrityMovieOrSerie", b =>
                {
                    b.Property<int>("CelebritiesId")
                        .HasColumnType("int");

                    b.Property<int>("MovieOrSeriesId")
                        .HasColumnType("int");

                    b.HasKey("CelebritiesId", "MovieOrSeriesId");

                    b.HasIndex("MovieOrSeriesId");

                    b.ToTable("CelebrityMovieOrSerie");
                });

            modelBuilder.Entity("ChallengeAlkemyDisney.Models.Celebrity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("History")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Celebrities");
                });

            modelBuilder.Entity("ChallengeAlkemyDisney.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("ChallengeAlkemyDisney.Models.MovieOrSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Valuation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("MovieOrSeries");
                });

            modelBuilder.Entity("CelebrityMovieOrSerie", b =>
                {
                    b.HasOne("ChallengeAlkemyDisney.Models.Celebrity", null)
                        .WithMany()
                        .HasForeignKey("CelebritiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChallengeAlkemyDisney.Models.MovieOrSerie", null)
                        .WithMany()
                        .HasForeignKey("MovieOrSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChallengeAlkemyDisney.Models.MovieOrSerie", b =>
                {
                    b.HasOne("ChallengeAlkemyDisney.Models.Gender", "Gender")
                        .WithMany("MovieOrSeries")
                        .HasForeignKey("GenderId");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("ChallengeAlkemyDisney.Models.Gender", b =>
                {
                    b.Navigation("MovieOrSeries");
                });
#pragma warning restore 612, 618
        }
    }
}
